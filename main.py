# -*- coding: utf-8 -*-
# DishFlow ‚Äî MVP (Render/Cloud ready)
# –§—É–Ω–∫—Ü–∏–∏: –∫–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞, —Å—Ç–∞—Ä—Ç/–∫–æ–Ω–µ—Ü —Å–º–µ–Ω—ã —Å —Ñ–æ—Ç–æ –≤ Drive, –∑–∞–ø–∏—Å—å –≤ Google Sheets.

import logging
from datetime import datetime
from typing import Dict, Optional

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

import gspread
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from googleapiclient.http import MediaInMemoryUpload

# -------------------- –ù–ê–°–¢–†–û–ô–ö–ò (–∑–∞–º–µ–Ω–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) --------------------
BOT_TOKEN = "7956865373:AAGwKAsQ8VMBSdWlosTPya5cAllXlntjjCw"

# Google Sheets (—Ç–∞–±–ª–∏—Ü–∞ —Å –ª–∏—Å—Ç–∞–º–∏ "–°–º–µ–Ω—ã" –∏ "–ö–æ–¥—ã_–î–æ—Å—Ç—É–ø–∞")
SPREADSHEET_ID = "1li6HIqiwVkEPn91aQn9Fprwv9Zg8cFvpUkLJGIE5O7g"

# JSON-—Ñ–∞–π–ª —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (–¥–æ–ª–∂–µ–Ω –ª–µ–∂–∞—Ç—å —Ä—è–¥–æ–º —Å main.py –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏)
SERVICE_ACCOUNT_FILE = "dishflow-375ee9dfb3a6.json"

# –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –≤ Google Drive ‚Äî —Å—é–¥–∞ –±—É–¥—É—Ç —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å—Å—è —Ñ–æ—Ç–æ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞.
# –ï—Å–ª–∏ —ç—Ç–æ–π –ø–∞–ø–∫–∏ –Ω–µ –æ–∫–∞–∂–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω–æ–π, —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—É—é –∏ –±—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å –≤ –Ω–µ—ë.
DRIVE_ROOT_FOLDER_ID = "1xAWBrTehWgRY-4yizcKGYXV4yWpIpO5f"
SUBFOLDER_IN_ENTRY = "smeny_vhod"
SUBFOLDER_OUT_EXIT = "smeny_vyhod"

# –ù–∞–∑–≤–∞–Ω–∏—è –ª–∏—Å—Ç–æ–≤
SHEET_SHIFTS = "–°–º–µ–Ω—ã"
SHEET_CODES  = "–ö–æ–¥—ã_–î–æ—Å—Ç—É–ø–∞"

# –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ä–æ–ª–∏
VALID_ROLES = {"–∫–∞—Å—Å–∏—Ä", "—à–∞—É—Ä–º–µ–Ω", "–±–∞—Ä–º–µ–Ω", "–≤–ª–∞–¥–µ–ª–µ—Ü"}
PLACE_DEFAULT = "–ö–∞–∑–∞–Ω –®–∞–≤–µ—Ä–º–∞"
# ------------------------------------------------------------------------------

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("dishflow")
print("DishFlow bot boot: Render/MVP")

# -------------------- Google –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è --------------------
SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive",
]
creds = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
gc = gspread.authorize(creds)
sh = gc.open_by_key(SPREADSHEET_ID)
drive = build("drive", "v3", credentials=creds)

def get_or_create_worksheet(name: str, header: Optional[list] = None):
    try:
        ws = sh.worksheet(name)
    except gspread.WorksheetNotFound:
        ws = sh.add_worksheet(title=name, rows=1000, cols=20)
        if header:
            ws.append_row(header, value_input_option="USER_ENTERED")
    return ws

ws_shifts = get_or_create_worksheet(
    SHEET_SHIFTS,
    header=["–î–∞—Ç–∞","–ò–º—è","Telegram ID","–†–æ–ª—å","–í—Ä–µ–º—è –≤—Ö–æ–¥–∞","–í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞",
            "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—á)","–§–æ—Ç–æ –≤—Ö–æ–¥","–§–æ—Ç–æ –≤—ã—Ö–æ–¥","–ó–∞–≤–µ–¥–µ–Ω–∏–µ"]
)
ws_codes = get_or_create_worksheet(
    SHEET_CODES,
    header=["–ö–æ–¥","–†–æ–ª—å","–§–ò–û","Telegram ID","–°—Ç–∞—Ç—É—Å","–ó–∞–≤–µ–¥–µ–Ω–∏–µ"]
)

def safe_get_file(file_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª/–ø–∞–ø–∫–∞ –ø–æ id (–Ω–µ –≤–∞–ª–∏–º—Å—è –Ω–∞ 403/404)."""
    try:
        drive.files().get(fileId=file_id, fields="id").execute()
        return True
    except HttpError as e:
        if e.resp and e.resp.status in (403, 404):
            return False
        raise

def create_root_fallback() -> str:
    """–ï—Å–ª–∏ –∑–∞–¥–∞–Ω–Ω–∞—è –∫–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ ‚Äî —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é DishFlow-Auto."""
    meta = {"name": "DishFlow-Auto", "mimeType": "application/vnd.google-apps.folder"}
    created = drive.files().create(body=meta, fields="id").execute()
    fid = created["id"]
    # –¥–∞—ë–º –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –±—ã–ª–æ —É–¥–æ–±–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å
    drive.permissions().create(fileId=fid, body={"type": "anyone", "role": "reader"}).execute()
    log.warning(f"[Drive] –ö–æ—Ä–µ–Ω—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π: {fid}")
    return fid

def ensure_subfolder(parent_id: str, name: str) -> str:
    q = (f"'{parent_id}' in parents and name = '{name}' "
         f"and mimeType='application/vnd.google-apps.folder' and trashed=false")
    res = drive.files().list(q=q, fields="files(id,name)").execute()
    if res.get("files"):
        return res["files"][0]["id"]
    meta = {"name": name, "mimeType": "application/vnd.google-apps.folder", "parents": [parent_id]}
    created = drive.files().create(body=meta, fields="id").execute()
    return created["id"]

def upload_photo_bytes(parent_id: str, filename: str, content: bytes) -> str:
    media = MediaInMemoryUpload(content, mimetype="image/jpeg")
    created = drive.files().create(
        body={"name": filename, "parents": [parent_id]},
        media_body=media, fields="id"
    ).execute()
    file_id = created["id"]
    # –ø—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    drive.permissions().create(fileId=file_id, body={"type": "anyone", "role": "reader"}).execute()
    return f"https://drive.google.com/file/d/{file_id}/view"

# –ì–æ—Ç–æ–≤–∏–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –∏ –ø–æ–¥–ø–∞–ø–∫–∏
if not safe_get_file(DRIVE_ROOT_FOLDER_ID):
    DRIVE_ROOT_FOLDER_ID = create_root_fallback()
FOLDER_ENTRY_ID = ensure_subfolder(DRIVE_ROOT_FOLDER_ID, SUBFOLDER_IN_ENTRY)
FOLDER_EXIT_ID  = ensure_subfolder(DRIVE_ROOT_FOLDER_ID, SUBFOLDER_OUT_EXIT)

# -------------------- –ü–∞–º—è—Ç—å –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã --------------------
user_state: Dict[int, Dict] = {}       # {uid: {started_at, entry_photo_link, exit_photo_link, awaiting}}
user_role_cache: Dict[int, Dict] = {}  # {uid: {role, place, fio}}

# -------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (Sheets) --------------------
def sheet_find_code_row(code: str) -> Optional[int]:
    """–ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ –≤ –ª–∏—Å—Ç–µ –ö–æ–¥—ã_–î–æ—Å—Ç—É–ø–∞ (–ø–æ –∫–æ–ª–æ–Ω–∫–µ A)."""
    code = code.strip().upper()
    for idx, val in enumerate(ws_codes.col_values(1), start=1):
        if val.strip().upper() == code:
            return idx
    return None

def sheet_find_user_by_id(user_id: int) -> Optional[int]:
    """–ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID (–∫–æ–ª–æ–Ω–∫–∞ D)."""
    for idx, val in enumerate(ws_codes.col_values(4), start=1):
        if str(user_id) == val.strip():
            return idx
    return None

def load_role_from_sheet_row(idx: int) -> Optional[Dict]:
    row = ws_codes.row_values(idx)
    try:
        return {
            "code": row[0].strip(),
            "role": row[1].strip().lower(),
            "fio":  row[2].strip(),
            "telegram_id": row[3].strip(),
            "status": row[4].strip().lower(),
            "place": row[5].strip() if len(row) > 5 else PLACE_DEFAULT,
        }
    except IndexError:
        return None

def activate_code_for_user(idx: int, user_id: int, fio: str):
    ws_codes.update_cell(idx, 3, fio)
    ws_codes.update_cell(idx, 4, str(user_id))
    ws_codes.update_cell(idx, 5, "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

# -------------------- Telegram bot --------------------
bot = Bot(token=BOT_TOKEN)
dp  = Dispatcher(bot)

kb_staff = ReplyKeyboardMarkup(resize_keyboard=True)
kb_staff.add(KeyboardButton("üîì –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É"), KeyboardButton("üîí –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É"))
kb_staff.add(KeyboardButton("üóí –ú–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–º–µ–Ω—ã"))

kb_owner = ReplyKeyboardMarkup(resize_keyboard=True)
kb_owner.add(KeyboardButton("üìä –û—Ç—á—ë—Ç –ø–æ —Å–º–µ–Ω–∞–º"), KeyboardButton("üîë –í—ã–¥–∞—Ç—å –∫–æ–¥ (manual)"))

async def get_file_bytes(file_id: str) -> bytes:
    """–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –∏–∑ Telegram"""
    f = await bot.get_file(file_id)
    url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{f.file_path}"
    import aiohttp
    async with aiohttp.ClientSession() as s:
        async with s.get(url) as r:
            return await r.read()

@dp.message_handler(commands=["start"])
async def start_(m: types.Message):
    uid = m.from_user.id
    row_idx = sheet_find_user_by_id(uid)
    if row_idx:
        rec = load_role_from_sheet_row(row_idx)
        if rec and rec["role"] in VALID_ROLES:
            user_role_cache[uid] = {"role": rec["role"], "place": rec["place"], "fio": rec["fio"]}
            kb = kb_staff if rec["role"] in {"–∫–∞—Å—Å–∏—Ä","—à–∞—É—Ä–º–µ–Ω","–±–∞—Ä–º–µ–Ω"} else kb_owner
            await m.answer(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {rec['fio']}.\n–†–æ–ª—å: {rec['role'].capitalize()}\n–¢–æ—á–∫–∞: {rec['place']}",
                reply_markup=kb
            )
            return
    await m.answer("üîê –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, STAFF-KASSIR-XXXX):")

@dp.message_handler(lambda x: x.text and x.text.strip().upper().startswith(("STAFF-","OWNER-","BAR-")))
async def code_(m: types.Message):
    uid  = m.from_user.id
    code = m.text.strip().upper()
    idx  = sheet_find_code_row(code)
    if not idx:
        await m.reply("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    rec = load_role_from_sheet_row(idx)
    if not rec:
        await m.reply("‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∞.")
        return
    if rec["telegram_id"] and rec["telegram_id"] != str(uid):
        await m.reply("‚ö†Ô∏è –ö–æ–¥ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        return
    role = rec["role"]
    if role not in VALID_ROLES:
        await m.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å –≤ –∫–æ–¥–µ.")
        return
    fio = m.from_user.full_name
    activate_code_for_user(idx, uid, fio)
    user_role_cache[uid] = {"role": role, "place": rec["place"], "fio": fio}
    kb = kb_staff if role in {"–∫–∞—Å—Å–∏—Ä","—à–∞—É—Ä–º–µ–Ω","–±–∞—Ä–º–µ–Ω"} else kb_owner
    await m.answer(f"‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç. –†–æ–ª—å: {role.capitalize()}.\n–¢–æ—á–∫–∞: {rec['place']}", reply_markup=kb)

@dp.message_handler(lambda x: x.text == "üîì –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É")
async def start_shift(m: types.Message):
    uid = m.from_user.id
    role = user_role_cache.get(uid, {}).get("role")
    if role not in {"–∫–∞—Å—Å–∏—Ä","—à–∞—É—Ä–º–µ–Ω","–±–∞—Ä–º–µ–Ω"}:
        await m.reply("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞.")
        return
    if user_state.get(uid, {}).get("started_at"):
        await m.reply("–°–º–µ–Ω–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞.")
        return
    user_state[uid] = {
        "started_at": datetime.now(),
        "entry_photo_link": None,
        "exit_photo_link": None,
        "awaiting": "entry_photo",
    }
    await m.reply("üü¢ –°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–µ–ª—Ñ–∏ –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –≤—Ö–æ–¥–∞.")

@dp.message_handler(lambda x: x.text == "üîí –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É")
async def end_shift(m: types.Message):
    uid = m.from_user.id
    role = user_role_cache.get(uid, {}).get("role")
    if role not in {"–∫–∞—Å—Å–∏—Ä","—à–∞—É—Ä–º–µ–Ω","–±–∞—Ä–º–µ–Ω"}:
        await m.reply("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞.")
        return
    st = user_state.get(uid)
    if not st or not st.get("started_at"):
        await m.reply("–°–º–µ–Ω–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–∞.")
        return
    if not st.get("entry_photo_link"):
        user_state[uid]["awaiting"] = "entry_photo"
        await m.reply("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤—Ö–æ–¥–∞.")
        return
    user_state[uid]["awaiting"] = "exit_photo"
    await m.reply("üî¥ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤—ã—Ö–æ–¥–∞ (—Å–µ–ª—Ñ–∏).")

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def photo_(m: types.Message):
    uid = m.from_user.id
    role = user_role_cache.get(uid, {}).get("role")
    if role not in {"–∫–∞—Å—Å–∏—Ä","—à–∞—É—Ä–º–µ–Ω","–±–∞—Ä–º–µ–Ω"}:
        await m.reply("–§–æ—Ç–æ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∞.")
        return
    st = user_state.get(uid)
    if not st or not st.get("awaiting"):
        await m.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´üîì –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É¬ª.")
        return

    photo_bytes = await get_file_bytes(m.photo[-1].file_id)
    now_str = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    place = user_role_cache.get(uid, {}).get("place", PLACE_DEFAULT)
    fio   = user_role_cache.get(uid, {}).get("fio", m.from_user.full_name)

    if st["awaiting"] == "entry_photo":
        link = upload_photo_bytes(FOLDER_ENTRY_ID, f"entry_{role}_{uid}_{now_str}.jpg", photo_bytes)
        user_state[uid]["entry_photo_link"] = link
        user_state[uid]["awaiting"] = None
        await m.reply("‚úÖ –§–æ—Ç–æ –≤—Ö–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –í –∫–æ–Ω—Ü–µ —Å–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ ¬´üîí –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É¬ª.")
        return

    if st["awaiting"] == "exit_photo":
        link = upload_photo_bytes(FOLDER_EXIT_ID, f"exit_{role}_{uid}_{now_str}.jpg", photo_bytes)
        user_state[uid]["exit_photo_link"] = link

        started_at: datetime = user_state[uid]["started_at"]
        ended_at = datetime.now()
        duration = round((ended_at - started_at).total_seconds() / 3600, 2)

        ws_shifts.append_row(
            [
                ended_at.strftime("%Y-%m-%d"),
                fio, str(uid), role,
                started_at.strftime("%H:%M:%S"),
                ended_at.strftime("%H:%M:%S"),
                duration,
                user_state[uid]["entry_photo_link"],
                user_state[uid]["exit_photo_link"],
                place,
            ],
            value_input_option="USER_ENTERED",
        )
        user_state[uid] = {}
        await m.reply(f"‚úÖ –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {duration} —á.")

@dp.errors_handler()
async def err_handler(_, e):
    log.error(f"–û—à–∏–±–∫–∞: {e}")
    return True

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
